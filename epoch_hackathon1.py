# -*- coding: utf-8 -*-
"""Epoch_hackathon1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P77YA8c5gefPmUOD_kcKb7oy43ajxTqu
"""

import pandas as pd
import numpy as np

df=pd.read_csv("cars (1).csv")

df.head()

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
df['Transport']=df['Transport'].replace('Public Transport',0)
df['Transport']=df['Transport'].replace('2Wheeler',0)
df['Transport']=df['Transport'].replace('Car',1)

df['Gender']=df['Gender'].replace('Male',1)
df['Gender']=df['Gender'].replace('Female',0)

df.head()

df['Transport'].value_counts()

df.info()

df.shape

df = df.dropna()

df.info()

x=df.drop(columns='Transport',axis=1)
y=df['Transport']

print(df.corr())
import seaborn as sb
dataplot = sb.heatmap(df.corr(), cmap="YlGnBu", annot=True)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

import matplotlib.pyplot as plt
plt.plot(x_train)
plt.xlabel("")
plt.ylabel("")
plt.title('')
plt.show()

import seaborn as sns
sns.scatterplot(data=df );

df.describe()

from sklearn.linear_model import LogisticRegression
classifier= LogisticRegression(random_state=0)
classifier.fit(x_train, y_train)

prediction=classifier.predict(x_test)
prediction

print(y_test.shape)
y_pred=classifier.predict(x_test)
y_pred.shape

from sklearn import metrics
accuracy = metrics.accuracy_score(y_test,prediction)
accuracy

#knn

from sklearn.neighbors import KNeighborsClassifier
classifier1= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )
classifier1.fit(x_train, y_train)

y_pred1= classifier1.predict(x_test)

accuracy = metrics.accuracy_score(y_test,y_pred1)
accuracy

#randomforest

from sklearn.ensemble import RandomForestClassifier
classifier2= RandomForestClassifier(n_estimators= 10, criterion="entropy")
classifier2.fit(x_train, y_train)

y_pred2= classifier2.predict(x_test)

accuracy = metrics.accuracy_score(y_test,y_pred2)
accuracy

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

cm = confusion_matrix(y_test, y_pred2)
accuracy = accuracy_score(y_test, y_pred2)
precision = precision_score(y_test, y_pred2)
recall = recall_score(y_test, y_pred2)
f1 = f1_score(y_test, y_pred2)
print("Confusion Matrix:")
print(cm)
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-Score:", f1)

from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test, y_pred2)
cm

import matplotlib.pyplot as plt
import numpy
from sklearn import metrics

actual = numpy.random.binomial(1,.9,size = 1000)
predicted = numpy.random.binomial(1,.9,size = 1000)

confusion_matrix = metrics.confusion_matrix(y_test,y_pred2)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [False, True],)

cm_display.plot()

cmap = plt.get_cmap('Blues')
cmap.set_bad('yellow')
plt.show()

input_data=(17,0,1,1,1,1,8,0)
input_np_data=np.asarray(input_data)

input_data_reshaped=input_np_data.reshape(1,-1)

std_data= sc.transform(input_data_reshaped)
print(std_data)

pridictions=classifier.predict(std_data)
print(pridictions)

#svm

from sklearn.svm import SVC
classifier3= SVC(kernel='linear', random_state=0)
classifier3.fit(x_train, y_train)

y_pred3= classifier3.predict(x_test)

accuracy = metrics.accuracy_score(y_test,y_pred3)
accuracy

from sklearn.naive_bayes import GaussianNB
classifier4 = GaussianNB()
classifier4.fit(x_train, y_train)

y_pred4 = classifier.predict(x_test)

accuracy = metrics.accuracy_score(y_test,y_pred4)
accuracy